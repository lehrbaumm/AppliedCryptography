-module(solution).
-export([decryptClassic/1, decryptClassic/4, decryptClassic/3, decryptClassic2/1, decryptCRS/1, decryptCRS/5, decryptCRS2/1, decryptCRS2/5, getDp/0, getDq/0, getGamma/0, bin2dec/1, inv/2, gcd/2, euler/2, prims/1, phi/1, power_mod/3, get_C/0, get_N/0, get_D/0, bits/2]).


prims(N) when is_integer(N), (N > 0) -> 
    lists:reverse(prims(N,[],2)).

prims(N,R,I) when I*I > N ->
    [N|R];
prims(N,R,I) when (N rem I) =:= 0 -> 
    prims(N div I,[I|R],I);
prims(N,R,2) -> 
    prims(N,R,3);
prims(N,R,I) -> 
    prims(N,R,I+2).

phi(A) ->
    phi(A, prims(A), []).

phi(S, [], _) ->
    S;
phi(S, [V|L], D) ->
    phi(S*(1-1/V), L, D ++ [V]).



power_mod(_, 0, _) ->
    1;
power_mod(B, 1, M) ->
    B rem M;
power_mod(B, 2, M) ->
    B*B rem M;
power_mod(B, E, M) ->
    Bm = B rem M,
    Em = E rem (M-1),
    Ebits = bits(Em, []),
    power(Bm, Ebits, Bm, M).

power(_, [], Acc, M) ->
    Acc rem M;
power(B, [0|Ebits], Acc, M) ->
    power(B, Ebits, (Acc*Acc) rem M, M);
power(B, [1|Ebits], Acc, M) ->
    power(B, Ebits, (Acc*Acc*B) rem M, M).

bits(1, Acc) -> 
    Acc;
bits(Y, Acc) ->
    bits(Y div 2, [Y rem 2 | Acc]).

bin2dec([]) ->
    0;
bin2dec(List) -> 
    bin2dec(List, 0).

bin2dec([], Sum) ->
    Sum;
bin2dec([I | Tail], Sum) ->
    bin2dec(Tail, Sum*256 + I).

gcd(A, 0) ->
    A;
gcd(A, B) -> 
    gcd(B, A rem B).

inv(A, B) ->
    inv(A, B, gcd(A, B)).


inv(A, B, 1) ->
    inv(A, B, euler(A, B));
inv(_, B, {X, _}) when X < 0 ->
    B + X;
inv(_, _, {X, _}) ->
    X;
inv(_, _, _) ->
    no_inverse.


    


euler(A, B)  ->
    euler(A, B, 1, 0, 0, 1).

euler(_, 0, X, _, Y, _) ->
    {X, Y};
euler(_, 1, _, X, _, Y) ->
    {X, Y};
euler(A, B, XA, YA, XB, YB) ->
    K1 = A div B,
    K2 = A rem B,
    YA_2 = XA-(K1*YA),
    YB_2 = XB-(K1*YB),
    euler(B, K2, YA, YA_2, YB, YB_2).


hex2s(HexStr) -> hex2s(HexStr,[]).

hex2s([HV,LV|Rest], Acc) ->  hex2s(Rest, [ hv(HV) * 16 + hv(LV) |Acc ]);
hex2s([], Acc)           -> lists:reverse(Acc).

hv(48) -> 0;
hv(49) -> 1; 
hv(50) -> 2;
hv(51) -> 3; 
hv(52) -> 4; 
hv(53) -> 5; 
hv(54) -> 6; 
hv(55) -> 7; 
hv(56) -> 8; 
hv(57) -> 9; 
hv(65) -> 10; 
hv(66) -> 11; 
hv(67) -> 12;
hv(68) -> 13; 
hv(69) -> 14; 
hv(70) -> 15.

%381228
decryptClassic(C) ->
    D = get_D(),
    N = get_N(),
    Message_Hex = integer_to_list(power_mod(C,D,N), 16),
    hex2s(Message_Hex).


decryptClassic(C, D, N, 0) ->
    power_mod(C,D,N);
decryptClassic(C, D, P, Q) ->
    N = P * Q,
    Message_Hex = integer_to_list(power_mod(C,D,N), 16),
    hex2s(Message_Hex).

decryptClassic(C, D, N) ->
    Message_Hex = integer_to_list(power_mod(C,D,N), 16),
    hex2s(Message_Hex).

%36707
decryptClassic2(C) ->
    D = get_D(),
    N = get_N(),
    binary:bin_to_list(crypto:mod_pow(C,D,N)).

getGamma() ->
    P = get_P(),
    Q = get_Q(),
    inv(Q, P).

getDp() ->
    D = get_D(),
    P = get_P(),
    Dp = D rem (P-1),
    Dp.

getDq() ->
    D = get_D(),
    Q = get_Q(),
    Dq = D rem (Q-1),
    Dq.

getMp(Func, C, Dp) ->    
    P = get_P(),
    Func(C, Dp, P).
 
getMq(Func, C, Dq) ->    
    Q = get_Q(),
    Func(C, Dq, Q).
    
%112888
decryptCRS(C) ->
    Gamma = getGamma(),
    Dp = getDp(),
    Dq = getDq(),
    Mq = getMq(power_mod, C, Dq),
    Mp = getMp(power_mod, C, Dp),
    N = get_N(),
    Save = Mp + Gamma * (Mq - Mp),
    Message_Hex = integer_to_list(Save rem N, 16),
    hex2s(Message_Hex).

%105066
decryptCRS(C, Gamma, Dp, Dq, N) ->
    Mp = getMp(power_mod, C, Dp),
    Mq = getMq(power_mod, C, Dq),
    Save = Mp + Gamma * (Mq - Mp),
    Message_Hex = integer_to_list(Save rem N, 16),
    hex2s(Message_Hex).

pow_lib(E, B, M) ->
    binary:bin_to_list(crypto:mod_pow(E, B, M)).

%13548
decryptCRS2(C, Gamma, Dp, Dq, N) ->
    Mq = bin2dec(getMq(fun pow_lib/3, C, Dq)),
    Mp = bin2dec(getMp(fun pow_lib/3, C, Dp)),
    Save = Mp + Gamma * (Mq - Mp),
    binary:bin_to_list(crypto:mod_pow(Save, 1, N)).

%16980
decryptCRS2(C) ->
    Gamma = getGamma(),
    Dp = getDp(),
    Dq = getDq(),
    Mq = bin2dec(getMq(fun pow_lib/3, C, Dq)),
    Mp = bin2dec(getMp(fun pow_lib/3, C, Dp)),
    N = get_N(),
    Save = Mp + Gamma * (Mq - Mp),
    binary:bin_to_list(crypto:mod_pow(Save, 1, N)).
    

get_N() ->
    P = get_P(),
    Q = get_Q(),
    N = P * Q,
    N.

get_P() ->
    31675727281325656378650275815036870073075503506093135402668988284047582230234258467605688521782344760159754141735662356011193420947311608435850566404918185999411166623943087854416995350649389538088689024701566496830518110466657545746240238894635742584612647648574741137665161365376438908175977601791246452515120052838341341889194252726343466888112420237628121739378062616082491727663627584826886897737953481833310205201122493306313841163854788229633693940307629142860205555903044050314630648838699538450602895188464221389842416066181843607277208716588663905995818191725899117879649482087489834959698059351566304221403.

get_Q() ->
    28497686265003976932967492827814876126053526688089768434297027258547973656844021829433405129475698422210220679094220475615971021204575349605926645367638636763975543206043787150254881954824767093421635052255226162149827997054490835247762217121750428225345526082729129906702405444805143280151831892975282527272572414742821655184527236578920183260234854291993307443038415727197987382331851545279711338164589459823028219258734760681061056166427588313906571846826854891068445972876221166159875986207233297913681929018757143183334620197062287769843055074118580268298366704569946824088015465856635799714620572321038322893399.

get_D() ->
    351228556786482002318700635024635703212223208909347575617920551457610669781003404760573947887550254232124260803042831235326957091414911045016368255383726624341422135793499460414438436809847159199409174853261665627234722581880829556631694370960259648050436590185347940334345522192218651982353944047736865257919687790511965675559866683063944776206751949751341337652713367783771744895595392110764320436292966382619858594978378206414749358332100069019947938141901908809869463396714949027540157104195157335252825830675015480698819301476207123782580932687614525280195309166074700117924177359235153684941001270764101453441205817065225922395831709243489736848181380222278930714033650448939127540049540325467423795738224357664960624552269065505783940092227080804842824914407132586052262092373796561590304276044324592340466536395523541347134959140238352755592611659452094181199909692055193099249055834934847931264788252820771634832243986235683404751198123880285690844377944689173118286256793451163068652137312496448453152069027394579251137797232515017304638423284612213287374652797502842811767018200073815066983295143226674866391024566889460669384273814189499125270289814368289885792408382087873483624089675780977317504040065644196628912227473.

get_C() ->
    461485244601111084854715290387111565532455013809999000549373221707927376543011818613138257842868050688773587789042390217893531432153024543047737617527585105034381037047589793514338817570863789016864462001325612743796187778785519947792637996775403225446805711481656005736553445978998206058329285390777913545646716495173840275444405996192111238956875455897242068496309102534377008669199875012122406835798403975510638910716927849490541534210126776676217451117124499901485951258297216669553727345621310032111050135931009313064722425139631208965558244982224034493122182385372367333772168847047879398011574079642489062801233909367319378702321256945207601021841367259993111455273281270187856276960240962262335405281396496168796954866179001143626512760704079488853570726334167867365310971057913043528582565192547222560189711440740571551127562876071188901639428529441672819465171232180904776608667891380095643757344891416141488204765893874065726124056980866257216195083024101478434080685565868283999526343206725210092530045144782261391541590399124623162300426738062333633439455443727162184194322204297005694258492831416463387275729652286374372199726231807272641805074452637022137542390393596085268223135435085275798027612835862172760844073821.
