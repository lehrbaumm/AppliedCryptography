-module(solution).
-export([get_fractions/2, sol_pq/2, find_ds/1, hack_RSA/2, get_N/0, get_E/0, get_N_2/0, get_E_2/0, euler/2]).
%0.111976 s for N, E
%7.239259 s for difficult N, E
%0.000057 s for 308911, 87943

get_fractions(A, B) ->
    K1 = A div B,
    K2 = A rem B,
    YA_2 = 1-(K1*0),
    YB_2 = 0-(K1*1),
    get_fractions(B, K2, 0, YA_2, 1, YB_2, []).

get_fractions(0, _, _, _, _, _, H) ->
    H;
get_fractions(1, _, _, _, _, _, H) ->
    H;
get_fractions(A, B, XA, YA, XB, YB, H) ->
    if
	XA == 0 -> T = [];
	XA rem 2 == 0 -> T = [];
	true -> T = [{abs(XB), abs(XA)}]
    end,
    K1 = A div B,
    K2 = A rem B,
    YA_2 = XA-(K1*YA),
    YB_2 = XB-(K1*YB),
    get_fractions(B, K2, YA, YA_2, YB, YB_2, H++T).


euler(A, B) ->
    K1 = A div B,
    K2 = A rem B,
    YA_2 = 1-(K1*0),
    YB_2 = 0-(K1*1),
    euler(B, K2, 0, YA_2, 1, YB_2, K1, []).

euler(0, _, XA, _, XB, _, DIV, H) ->
    T = [{DIV, {abs(XB), abs(XA)}}],
    H++T;
euler(1, _, XA, _, XB, _, DIV, H) ->
    T = [{DIV, {abs(XB), abs(XA)}}],
    H++T;
euler(A, B, XA, YA, XB, YB, DIV, H) ->
    T = [{DIV, {abs(XB), abs(XA)}}],
    K1 = A div B,
    K2 = A rem B,
    YA_2 = XA-(K1*YA),
    YB_2 = XB-(K1*YB),
    euler(B, K2, YA, YA_2, YB, YB_2, K1, H++T).

sol_pq(P, Q) ->
    U_SQRT = ((P*P) div 4)-Q,
    SQRT = isqrt4(U_SQRT),
    S_SQRT = SQRT * SQRT,
    if
	S_SQRT == U_SQRT ->
	    {1, {((-P) div 2)+(SQRT), ((-P) div 2)-(SQRT)}};
	true ->
	    {1.0, {0, 1}}
    end.

find_ds(D, S) when D rem 2 == 0 ->
    find_ds(D div 2, S+1);
find_ds(D, S) ->
    {D, S}.

find_ds(N) ->
    find_ds(N-1, 0).


hack_RSA(N, E) ->
    Frac = get_fractions(E, N),
    hack_RSA(N, E, Frac).

hack_RSA(_, _, []) ->
    ended;
hack_RSA(N, E, [H|T]) ->
    {K, D} = H,
    if
       K == 0 ->
	    hack_RSA(N, E, T);
       D == 1 ->
	    hack_RSA(N, E, T);
       true ->
	    G = (E*D-1),
	    Phi_N = trunc(G div K),
	    if
		Phi_N rem 2 == 0 ->
		    P = float_to_integer((N - Phi_N)+1),
		    Q = N,
		    {TV, {X_1, X_2}} = sol_pq(P, Q),
		    if
			is_integer(TV) ->
			    io:format("P =  ~w Q = ~w D = ~w~n", [abs(X_1), abs(X_2), D]),
			    ok;
			true ->
			    hack_RSA(N, E, T)
		    end;
		true ->
		    hack_RSA(N, E, T)
	    end
    end.


float_to_integer(N) when is_integer(N) ->
  N;
float_to_integer(N) when is_float(N) ->
  Integer = trunc(N),
  case N == Integer of
    true ->
      Integer;
    false ->
      error
  end.

isqrt4(0) -> 0;

isqrt4(N) when is_integer(N), N >= 0 ->
    isqrt4(N, N).

isqrt4(N, Xk) ->
    Xk1 = (Xk + N div Xk) div 2,
    if
        Xk1 >= Xk ->
            Xk;
        Xk1 < Xk ->
            isqrt4(N, Xk1)
    end.

get_N() ->
    707394576529221780281698028232049547514437569116340051435791155205703651155676155680591670794397163871372230831536875886119638031754794633712228650441777851273344332330236693656799942078242439096939269656023815989965389364827249787311467223636322006505031240206596484384046470265924783183774663603480724261929948214565797406764770478957392029344160748096277900847195059813802787301124387934306969379004331763380399137659835676857236374336461683184040792309383863674222372674110503224966655853980220324837661913516777438009387686300217533092213461374546836370240597236342024992982697719169253902750851666143716104944149790274594570968261360586168924140633104933995964707407680695130945029805857710257500568103721403253920734308262908456927798481346161965857278611910837454673430630719116956258446879036207911711468131315719313553819180415804046573197980347263561735520033043629701735450627796946723618368099855486105838377350794630575901033232118456856685450326738736085062544469979951058067066896396651352138421661325070156271822427489721142136859501769634962709959921485182702193262869025771410187830893460128813786446796742061770515192121198613714287528667062443701181548160439973561175978045861407738766656689323004927113993529559.
get_E() ->
    445676824769085666231766965007573215387813406607163598025295890847055918888839410837414438974940245910691051025133246949629672617470367432533956711121061499291642697741969774037402835168082614558381104476818031985377281945675223823459884975875364079048365654639827408032367651208935933864199701850675482624701886900215477896841743947329763597534528545537563735385823031565557121742884568683454152092086742733264822625295247190097735476087591786298870017157551607963572360158597779546803686775574763831309749613334570401687712552715809114567000226134169078134904470144934345666726514622648252035408741097320201382015376570113038378691792508874446134801557781760720531126169465623170366659025656588198082903284412019424062584909024824973447056823781780524094769894664314962111807100802162756862781108385937631698593429708323403424444369536331305085832631934977397854266212941140001564900586442842183714813399552860955121171807601102305596910758822235360959532065327026225200745423048406282722565354047774539714215494141891909679289721021789910399510831203482223248274998993962353226253531310303936362283979149614062977307686458384976751106628076278890370914464833649891422006007358168811808150846235000649470501640166872374009060973473.

get_N_2() ->
    707394576529221780281698028232049547514437569116340051435791155205703651155676155680591670794397163871372230831536875886119638031754794633712228650441777851273344332330236693656799942078242439096939269656023815989965389364827249787311467223636322006505031240206596484384046470265924783183774663603480724261929948214565797406764770478957392029344160748096277900847195059813802787301124387934306969379004331763380399137659835676857236374336461683184040792309383863674222372674110503224966655853980220324837661913516777438009387686300217533092213461374546836370240597236342024992982697719169253902750851666143716104944149790274594570968261360586168924140633104933995964707407680695130945029805857710257500568103721403253920734308262908456927798481346161965857278611910837454673430630719116956258446879036207911711468131315719313553819180415804046573197980347263561735520033043629701735450627796946723618368099855486105838377350794630575901033232118456856685450326738736085062544469979951058067066896396651352138421661325070156271822427489721142136859501769634962709959921485182702193262869025771410187830893460128813786446796742061770515192121198613714287528667062443701181548160439973561175978045861407738766656689323004927113993529559.
get_E_2() ->
    35735496112177664226849181788896300444915672717990075901560234019560163051776536650473840572699274245725346796046943297976063358613420538318461257195495298090249018747374534536319654697500258721994272994869848409359843187329822415640505212002954578203553726542633315098905299178007728720018932159892581692066597618537709790598303110975651568050460518237668850739327020443210435099277984405689155610348807528082973888177365366311413006090730478933755886832863452102280263610607348566993045606777353753845744058268043590300321759276189473237693866699735279935629704088137717294429314076288381583640782474244845289025289470710680234087921594091025408840702216965503072885787815772635253473255849508954552771678476221299018821568968395560768223890160264628959386101331485428847772251449095953325495706133682831263672602301356027570168435189296600881147371853437490977539233945456813224102602262523731192624886706252305796001770053157466088102456634241199187600515310681466882215087326775294125429493536228062526686548532555124370910682770436791040012743985912057135076251741780910979910543059466711861027809020288152625151533536792428353246126376458814794733793593336970398197413064496610631541247189091007599567050577347301674710963989.
